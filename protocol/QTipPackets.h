// QTipPackets.h was generated by ProtoGen version 2.18.c

/**

Copyright (c) 2020 DroneCAN

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

**/

#ifndef _QTIPPACKETS_H
#define _QTIPPACKETS_H

// C++ compilers: don't mangle us
#ifdef __cplusplus
extern "C" {
#endif

/*!
 * \file
 */

#include "QTipProtocol.h"

/*!
 * Serialized CAN data
 */
typedef struct
{
    unsigned ext : 1;          //!< 0 = Std Id, 1 = Ext Id
    unsigned frameType : 2;    //!< CAN frame type
    unsigned hasTimestamp : 1; //!< 1 if the packet contains timestamp information
    uint16_t idHi;             //!< CAN frame ID (upper bytes)
    uint16_t idLo;             //!< CAN frame ID (lower bytes)
    uint8_t  dlc;              //!< CAN data length code
    uint32_t timestamp;        //!< CAN frame timestamp
    uint8_t  data[64];        
}QTIP_CANFrame_t;

//! Create the QTIP_CANFrame packet
void encodeQTIP_CANFramePacketStructure(QTIP_Packet_t* pkt, const QTIP_CANFrame_t* user);

//! Decode the QTIP_CANFrame packet
int decodeQTIP_CANFramePacketStructure(const QTIP_Packet_t* pkt, QTIP_CANFrame_t* user);

//! return the packet ID for the QTIP_CANFrame packet
#define getQTIP_CANFramePacketID() (PKT_QTIP_CAN_FRAME)

//! return the minimum encoded length for the QTIP_CANFrame packet
#define getQTIP_CANFrameMinDataLength() (4)

//! return the maximum encoded length for the QTIP_CANFrame packet
#define getQTIP_CANFrameMaxDataLength() (74)

#ifdef __cplusplus
}
#endif
#endif
